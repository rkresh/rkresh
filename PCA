import numpy as np
import pandas as pd
from datetime import datetime
from collections import Counter
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from matplotlib.pyplot import cm
import itertools

#read the csv file
meta = pd.read_csv('stock_data.csv')

#defining needed arrays
name_list=[]
stock_date = []
stock_open = []
stock_close = []
stock_volume = []
stock_high = []
stock_low =[]
stock_Name = []
s_array = []
dt_array=[]
date_array=[]
open_array=[]
close_array=[]
volume_array=[]
high_array=[]
low_array=[]
Name_array=[]
returns=[]
clos=[]

print("\nQ1. Load the data")
print("********************")
print (meta)
#copy the rows into seperate arrays
st_date=meta['date'].values.tolist()
st_open=meta['open'].values.tolist()
st_close=meta['close'].values.tolist()
st_volume=meta['volume'].values.tolist()
st_high=meta['high'].values.tolist()
st_low=meta['low'].values.tolist()
st_Name=meta['Name'].values.tolist()
Name_sorted=meta['Name'].values.tolist()
Name_reversed=meta['Name'].values.tolist()

#sorting the names alphabetically and removing he duplicates
print("\nQ2. Sorting names")
print("***************************")
Name_sorted.sort()
Name_sort = list( dict.fromkeys(Name_sorted))
print("Total number of unique names",len(Name_sort))
print('\nfirst 5 names')
for i in range(5):
    print(Name_sort[i], "\t",end='')

print("\nlast 5 names")
Name_reversed.sort(reverse=True)
Name_reverse = list( dict.fromkeys(Name_reversed))
for i in range(5):
    print(Name_reverse[i], "\t",end='')

##define the start and end dates in given problem and convet them into desired format for easy comparison
start = "01/01/2014"
end = "31/12/2017"
sdate1 = datetime.strptime(start, "%d/%m/%Y")
edate1 = datetime.strptime(end, "%d/%m/%Y") 

#identify the first and last dates of each name from csv file
print("\nQ3. Names with first date after 1/1/2014 or last date before 31/12/2017")
print("***************************")
#print(st_Name,'\n',len(st_Name))
Name_sort = list( dict.fromkeys(st_Name))
#print(Name_sort,'\n',len(Name_sort))
i=0
iterr=0
for i in range(len(Name_sort)):
    var=Name_sort[i]
    count=1
    k=0
    flag=0
    for k in range(len(st_Name)):
        if flag == 0:
            if st_Name[k] == var:
                first_date=st_date[k]
                flag=1
        else:
            if var == st_Name[k]:
                count = count+1
            else:
                last_date=st_date[k-1]
                break
##convert the first and last date to desired format for comprison      
    fdate = datetime.strptime(first_date, '%d/%m/%Y')
    ldate = datetime.strptime(last_date, '%d/%m/%Y')        
##comparng and filtering based on the dates      
    if fdate > sdate1:
        iterr=iterr+1
        print(var, ", ",end='')
    elif ldate < edate1:
        iterr=iterr+1
        print(var, ", ",end='')
    else:
        name_list.append(var) #new array with desired names only

print("\nNumber of elements removed ",iterr)
print("Number of elements remaining ",len(name_list))

##creating new array with the elemnts in specified range based on the identified unique names
iterr=0
i=0
for i in range(len(st_Name)):
    if (st_Name[i] in name_list):
        iterr=iterr+1
        stock_date.append(st_date[i])
        stock_open.append(st_open[i])
        stock_close.append(st_close[i])
        stock_volume.append(st_volume[i]) 
        stock_high.append(st_high[i])
        stock_low.append(st_low[i])
        stock_Name.append(st_Name[i])
#print("\nnumber of rows copied ",iter)

print("\nQ4. Dates that are common to all the remaining names")
print("***************************")
##checking the similar dates in the selected names
iterr=0
ite=0
var=stock_Name[0]
for i in range(len(stock_date)):
    if var==stock_Name[i]:
        counter=stock_date.count(stock_date[i]) #no of times data is duplicated
#copying the dates to dt_array if the same date is present in all the selected names
        if counter==len(name_list):
            s_date = datetime.strptime(stock_date[i], '%d/%m/%Y')
            if s_date > sdate1 and s_date < edate1:
                dt_array.append(stock_date[i])
                ite=ite+1
            iterr=iterr+1
print("Total number of dates ",len(stock_date))
print("Number of dates removed that are before 1/1/2014 or after 31/12/2017",iterr)
print("Number of dates in the selected period range ",ite)

#sorting the dates according to the given range
s_array1=dt_array.copy()
s_array2=dt_array.copy()
s_array1.sort(key=lambda date: datetime.strptime(date, "%d/%m/%Y"))
array_sort1 = list( dict.fromkeys(s_array1))
print('\nfirst 5 dates in the range')
i=0
for i in range(5):
    print(array_sort1[i])

s_array2.sort(key=lambda date: datetime.strptime(date, "%d/%m/%Y"), reverse=True)
array_sort2 = list( dict.fromkeys(s_array2))
print("\nlast 5 dates in the range")
for i in range(5):
    print(array_sort2[i])

#copying the data from initial array based on selected dates 
i=0
for i in range(len(st_Name)):
    if (st_date[i] in dt_array):
            date_array.append(st_date[i])
            open_array.append(st_open[i])
            close_array.append(st_close[i])
            volume_array.append(st_volume[i])
            high_array.append(st_high[i])
            low_array.append(st_low[i])
            Name_array.append(st_Name[i])


#print(close_array,'\n',len(close_array))
iterr=0
for j in range(len(dt_array)):
    it=0
    ad=len(dt_array)
    for i in range(len(name_list)):
        clos.append(close_array[(it*ad)+iterr])
#        if j==1 and i==1:
#            print(i,j,it,ad,iter,(it*ad)+iter,close_array[(it*ad)+iter])
#        if j==1 and i==2:
 #          print(i,j,it,ad,iter,(it*ad)+iter,close_array[(it*ad)+iter])
        it=it+1
    iterr=iterr+1

#print("\n ",date_array[i]," \t ",Name_array[i],"\t ",clos[i])

print('\n')
#print(clos,'\n',len(clos))

print("\nQ5. Dataframe created with dates in row and names in column")
print("***************************")  
# dataframe with a row for each of the selected dates and its specific names in row
df1 = pd.DataFrame(columns=name_list)
it=0
for i in range(len(dt_array)):
    a_list=[]
    for j in range(len(name_list)):
        a_list = np.append(a_list, clos[it])
        it=it+1
    a_list = np.array(a_list)
    list1 = a_list.tolist()
    df1.loc[i] = list1

df1['Date'] = dt_array
df1.set_index('Date',inplace=True)
print(df1)


print("\nQ6. Dataframe created with returns")
print("***************************")  
#calculate return(name, date) = (close(name, date) - close(name, previous date)) / close(name, previous date)
iterr=len(name_list)
i=0
j=0
for j in range((len(dt_array)-1)):
    for i in range(len(name_list)):
        ret=(clos[iterr]-clos[iterr-len(name_list)])/clos[iterr-len(name_list)]
 #       if j==0 and i==1:
 #           print(iter,clos[iter], clos[iter-len(name_list)], ret)
        returns.append(ret)
        iterr=iterr+1


i=0
iterr=0
for i in range (len(name_list)):
    clos.pop(iterr)
    iterr=iterr+1
dt_array.pop(0)

df1 = pd.DataFrame(columns=name_list)
it=0
for i in range(len(dt_array)):
    a_list=[]
    for j in range(len(name_list)):
        a_list = np.append(a_list, returns[it])
        it=it+1
    a_list = np.array(a_list)
    list1 = a_list.tolist()
    df1.loc[i] = list1

df1['Date'] = dt_array
df1.set_index('Date',inplace=True)
print(df1)


print("\nQ7. PCA")
print("***************************")  

#data3 = {'Name':Name_array,'Close':close_array, 'Returns':returns}
#data3=[name_list]
#df3 = pd.DataFrame(data3)
#print("\ndf3")
#print(df3)
pca1 = PCA(n_components=20)
principalComponents = pca1.fit_transform(df1)

principalDf = pd.DataFrame(data = principalComponents)
print("\nPCA with n_components")
#for_visual = {'Close':close_array, 'Returns':returns, 'Date':date_array}
df1['Date'] = dt_array
for_visual = pd.concat([principalDf, df1['Date']], axis = 1)
#print(for_visual)
print(principalDf)
print("\nQ8. Explained variance ratios for the principal components")
print("***************************")  
exp_var_pca = pca1.explained_variance_ratio_
cum_sum_eigenvalues = np.cumsum(exp_var_pca)

print ("Proportion of Variance Explained : \n", pca1.explained_variance_ratio_)  
print("\nPrincipal components whose eigenvalues are greater than one \n",pca1.explained_variance_) 
print("\nPercentage of variance explained by the first principal component: ",exp_var_pca[0]*100,"%")
print("\nQ9. Cumulative variance ratios")
print("***************************")  
print( cum_sum_eigenvalues)

plt.figure(figsize=(5,5))
plt.title('First 20 explained variance ratios')
plt.plot(range(0,20), pca1.explained_variance_ratio_)
#plt.plot(range(0,20), pca1.explained_variance_ratio_,markevery=(1,0.12), ls="", marker="o", label="points")
plt.xlabel('Components')
plt.ylabel('PCA')

plt.figure(figsize=(5,5))
plt.title('First 20 cumulative variance ratios ')
plt.plot( pca1.explained_variance_ratio_,cum_sum_eigenvalues)
#plt.plot( pca1.explained_variance_ratio_,cum_sum_eigenvalues,markevery=(0.12,0.51), ls="", marker="o", label="points")
plt.xlabel('PCA')
plt.ylabel('Cumulative variance ratios')

plt.figure(figsize=(5,5))
plt.title('Components vs Cumulative variance ratios ')
plt.plot( range(0,20),cum_sum_eigenvalues)
plt.xlabel('Components')
plt.ylabel('Cumulative variance ratios')

plt.figure(figsize=(5,5))
PC_values = np.arange(pca1.n_components_) + 1
plt.plot(PC_values, pca1.explained_variance_ratio_, 'ro-', linewidth=2)
plt.title('Scree Plot')
plt.xlabel('Principal Component')
plt.ylabel('Proportion of Variance Explained')

print("\n\n\nPCA with n_components after standardisation")
features = name_list # Separating out the features
x = df1.loc[:, features].values 
# Standardizing the features
xx = StandardScaler().fit_transform(x)
print(" shape ",xx.shape,"\n mean ",np.mean(xx),"\n std ",np.std(xx),"\n")
pca3 = PCA(n_components=20)
principalComponents1 = pca3.fit_transform(xx)
print("\nQ10.1. PCA after standardising")
print("***************************")  
principalDf1 = pd.DataFrame(data = principalComponents1)
print(principalDf1)
for_visual = pd.concat([principalDf1, df1['Date']], axis = 1)
#for_visual1 = {'Close':close_array, 'Returns':returns, 'Date':date_array}
#print(for_visual1)
print("\nQ10.2. Explained variance ratios for the principal components")
print("***************************") 
exp_var_pca = pca3.explained_variance_ratio_
cum_sum_eigenvalues = np.cumsum(exp_var_pca)
print ("Proportion of Variance Explained : ", pca3.explained_variance_ratio_)  
print("\nPrincipal components whose eigenvalues are greater than one ",pca3.explained_variance_) 
print("\nPercentage of variance explained by the first principal component: ",exp_var_pca[0]*100,"%")

print("\nQ10.3. Cumulative variance ratios")
print("***************************")  
print( cum_sum_eigenvalues)

plt.figure(figsize=(5,5))
plt.title('First 20 explained variance ratios')
plt.plot(range(0,20), pca3.explained_variance_ratio_)
#plt.plot(range(0,20), pca3.explained_variance_ratio_,markevery=(3,0.036), ls="", marker="o", label="points")
plt.xlabel('Components')
plt.ylabel('PCA')

plt.figure(figsize=(5,5))
plt.title('First 20 cumulative variance ratios ')
plt.plot( pca3.explained_variance_ratio_,cum_sum_eigenvalues)
#plt.plot( pca3.explained_variance_ratio_,cum_sum_eigenvalues,markevery=(0.036,0.21), ls="", marker="o", label="points")
plt.xlabel('PCA')
plt.ylabel('Cumulative variance ratios')

plt.figure(figsize=(5,5))
plt.title('Components vs Cumulative variance ratios ')
plt.plot( range(0,20),cum_sum_eigenvalues)
plt.xlabel('Components')
plt.ylabel('Cumulative variance ratios')

plt.figure(figsize=(5,5))
PC_values = np.arange(pca3.n_components_) + 1
plt.plot(PC_values, pca3.explained_variance_ratio_, 'ro-', linewidth=2)
plt.title('Scree Plot')
plt.xlabel('Principal Component')
plt.ylabel('Proportion of Variance Explained')

plt.show()
