import numpy as np
import random
## Initialising Variable to work with
arr= []
arr_t=[]
cleaned=[]
cleaned_t=[]
actual=[]
pred=[]
maxiter=0
### Read the data from train.data and test.data 
def readdata(flag):
 arr=[]
 if flag == 1:
 my_file = open("train.data", "r")
 else:
 my_file = open("test.data", "r")
 content_list = my_file.readlines()
 string = np.array(content_list)
 k=0
 ### Split the list based on comma sepertor and store into an array to work with
 for i in string:
 element=string[k]
 str_split=element.split(",")
 s_string = np.array(str_split)
 arr.append(s_string)
 k=k+1
 random.seed(2)
 random.shuffle(arr)
 return arr
### Clean the dataset and mark the label as 1 or -1 based on the need
def clean_data(ar,ip_1,ip_2,flag):
 clean=[]
 if flag==1:
 for row in ar:
 if ip_1 in row[4]:
 clean.append(row)
 elif ip_2 in row[4]:
 clean.append(row)
 if ip_1 in row[4]:
 row[4]=1
 elif ip_2 in row[4]:
 row[4]=-1
 else:
 for row in ar:
 clean.append(row)
 if ip_1 in row[4]:
 row[4]=1
 else:
 row[4]=-1 
 return(clean)
### Binary clssification
def binary(data,b,w,maxiter):
 a=0
 best_acc=0
 for iter in range(maxiter):
 accu = 0
 for row in data:
 for i in range(len(row)-1):
 xi=float(row[i])
 a += w[i]*xi+b
 if a > 0:
 a=1
 else:
 a=-1
 ya=float(row[4])*a
 if ya <= 0:
 for i in range(len(row)-1):
 xi=float(row[i])
 y=float(row[4])
 w[i]=w[i]+y*xi
 b=b+y
 else:
 accu += 1
 if best_acc < accu:
 best_acc = accu
 if maxiter == 20:
 best_w = w.copy()
 best_b = b
 print(" Number of records correctly classified ",best_acc,"out of ", len(data)) 
 print(" Accuracy",int(((best_acc) / len(data)) * 100),"%")
 if maxiter == 20:
 print(" best_b ", best_b)
 print(" best_w ",best_w)
 return best_w, best_b
 else:
 return 
print("\n \n ### Binary Classification ###\n \n ")
print(" Between class-1 and class-2 ")
arr=readdata(1)
cleaned=clean_data(arr,'class-1','class-2',1)
arr_t=readdata(2)
cleaned_t=clean_data(arr_t,'class-1','class-2',1)
b=0
w=[0,0,0,0]
print(" \t\tTrain ")
ww, bb = binary(cleaned,b,w,20) 
print(" \t\tTest ")
binary(cleaned_t,bb,ww,1)
print("\n\n Between class-1 and class-3 ")
arr=readdata(1)
arr_t=readdata(2)
cleaned=clean_data(arr,'class-1','class-3',1)
cleaned_t=clean_data(arr_t,'class-1','class-3',1)
b=0
w=[0,0,0,0]
print(" \t\tTrain ")
ww, bb = binary(cleaned,b,w,20) 
print(" \t\tTest ")
binary(cleaned_t,bb,ww,1)
print("\n\n Between class-2 and class-3 ")
arr=readdata(1)
arr_t=readdata(2)
cleaned=clean_data(arr,'class-2','class-3',1)
cleaned_t=clean_data(arr_t,'class-2','class-3',1)
b=0
w=[0,0,0,0]
print(" \t\tTrain ")
ww, bb = binary(cleaned,b,w,20) 
print(" \t\tTest ")
binary(cleaned_t,bb,ww,1)
####### MULTI
def multitrain(data,b,w,maxiter,coef):
 best_acc=0
 a=0
 for iter in range(maxiter):
 accu = 0
 for row in data:
 for i in range(len(row)-1):
 xi=float(row[i])
 a += w[i]*xi+b
 if a > 0:
 a=1
 else:
 a=-1
 ya=float(row[4])*a
 if ya <= 0:
 for i in range(len(row)-1):
 xi=float(row[i])
 y=float(row[4])
 w[i]=w[i]+(y*xi)-(2*coef*w[i])
 b=b+y
 else:
 accu += 1
 if best_acc < accu:
 best_acc = accu
 if maxiter == 20:
 best_w = w.copy()
 best_b = b
 if maxiter == 20:
 print(" best_b ", best_b)
 print(" best_w ",best_w)
 return best_w, best_b
 else:
 return 
def multitest(data,b1,w1,b2,w2,b3,w3):
 great=''
 best_acc=0
 a1=0
 a2=0
 a3=0
 for iter in range(1):
 accu = 0
 for row in data:
 for i in range(len(row)-1):
 xi=float(row[i])
 a1 += w1[i]*xi+b1
 a2 += w2[i]*xi+b2
 a3 += w3[i]*xi+b3
 if a1>a2 and a1>a3:
 great='class-1'
 elif a2>a1 and a2>a3:
 great='class-2'
 elif a3>a1 and a3>a2:
 great='class-3'
 if great in row[4]:
 accu += 1
 
 if best_acc < accu:
 best_acc = accu
 print(" Number of records correctly classified ",best_acc,"out of ", len(data)) 
 print(" Accuracy",int(((best_acc) / len(data)) * 100),"%")
 
 return
print("\n \n ### Multi-class Classification ### \n \n ")
print(" class-1 vs rest \n")
arr=readdata(1)
cleaned=clean_data(arr,'class-1',0,2)
b=0
w=[0,0,0,0]
ww1, bb1 = multitrain(cleaned,b,w,20,0) 
print("\n class-2 vs rest \n")
arr=readdata(1)
cleaned=clean_data(arr,'class-2',0,2)
b=0
w=[0,0,0,0]
ww2, bb2 = multitrain(cleaned,b,w,20,0) 
print("\n class-3 vs rest \n")
arr=readdata(1)
cleaned=clean_data(arr,'class-3',0,2)
b=0
w=[0,0,0,0]
ww3, bb3 = multitrain(cleaned,b,w,20,0) 
arr=readdata(1)
print(" \n Train data on Multi-class classifier \n")
multitest(arr,bb1,ww1,bb2,ww2,bb3,ww3)
arr_t=readdata(2)
print(" \n Test data on Multi-class classifier \n")
multitest(arr_t,bb1,ww1,bb2,ww2,bb3,ww3)
### Multi-class classification with coeff ###
for i in range(5):
 if i == 0:
 coeff=0.01
 print(" \n \n ### Multi with coeff 0.01 ###\n \n ")
 elif i == 1:
 coeff=0.1
 print(" \n \n ### Multi with coeff 0.1 ###\n \n ")
 elif i == 2:
 coeff=1.0
 print(" \n \n ### Multi with coeff 1.0 ###\n \n ")
 elif i == 3:
 coeff=10.0
 print(" \n \n ### Multi with coeff 10.0 ###\n \n ")
 else:
 coeff=100.0
 print(" \n \n ### Multi with coeff 100.0 ###\n \n ")
 
 print(" class-1 vs rest \n")
 arr=readdata(1)
 cleaned=clean_data(arr,'class-1',0,2)
 b=0
 w=[0,0,0,0]
 ww1, bb1 = multitrain(cleaned,b,w,20,coeff) 
 
 print("\n class-2 vs rest \n")
 arr=readdata(1)
 cleaned=clean_data(arr,'class-2',0,2)
 b=0
 w=[0,0,0,0]
 ww2, bb2 = multitrain(cleaned,b,w,20,coeff) 
 
 print("\n class-3 vs rest \n")
 arr=readdata(1)
 cleaned=clean_data(arr,'class-3',0,2)
 b=0
 w=[0,0,0,0]
 ww3, bb3 = multitrain(cleaned,b,w,20,coeff) 
 
 
 arr=readdata(1)
 print(" \n Train data on Multi classifier \n")
 multitest(arr,bb1,ww1,bb2,ww2,bb3,ww3)
 
 arr_t=readdata(2)
 print(" \n Test data on Multi classifier \n")
 multitest(arr_t,bb1,ww1,bb2,ww2,bb3,ww3)
