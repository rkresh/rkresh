//Serial

#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <math.h>
#include <sys/time.h>  // for wallclock timing functions

int main(void) {
  
int i,j,k,iter,n;
double start, endl;  // start and endl to fix the size of radiator(40% of wall) in an  nxn matrix where the loop runs 'iter' number of times-iterations

printf("enter the size of array N*N \n");
scanf("%d", &n);

printf("enter the number of iterations required \n");
scanf("%d", &iter);

double *t = (double *)malloc((n+1) * (n+1) * sizeof(double));

if(t == NULL){
        printf("Memory not allocated.\n");
        exit(0);
}


//allocating all elemnets of n*n matrix to 0
for(i=0; i<n+1; i++) {
 for(j=0; j<n+1; j++) {
  t[i*n+j]=0;
 }
}

//assigning the border elemnts to a value = 10
for (j=0; j<n+1; j++) {
    t[0*n+j]=10;
    t[n*n+j+n]=10;
    t[j*n+0+j]=10;
    t[j*n+n+j]=10;
  }

//detrmine 40% of wall for the radiator and assign those elments to 100
start = (n/2)-((0.4*n)/2);
endl = (n/2)+((0.4*n)/2);

for(i=start; i<endl+1; i++) {
 for(j=0; j<n+1; j++) {
  if(j == n){
   t[i*n+j+i]=100;
  }
 } 
}

printf("\n\n");

//compute the value of each elemnts from its neighboring elements
start = omp_get_wtime(); // save start time in to variable 
for(k=0;k<iter;k++){
 for(i=1;i<n;i++){
  for(j=1;j<n;j++) {
   t[i*n+j+i] = 0.25*(t[(i-1)*n+j+(i-1)]+t[(i+1)*n+j+i]+t[i*n+(j-1)+i]+t[i*n+(j+1)+i]);
  }
 }
}
endl = omp_get_wtime(); // save end time in to variable
printf("Time: %f milliseconds on %d threads\n",1000.0*(endl-start),omp_get_num_threads( ));

//print the array in 8x8 form
for(i=0; i<n+1; i++) {
 if(i%(n/8) == 0){
  printf(" %dth row\t t[%d][0] \n",i,i);
  for(j=0; j<n+1; j++) {
   if(j%(n/8) == 0){
   printf(" %f ", t[i*n+j+i]);
   }
  }  
  printf("\n");
 }
}

//checking value of any specifc elements
printf(" \nHow many values do you want to check? ");
scanf("%d",&k);
for(iter=0; iter<k; iter++) {
 printf(" Enter the position of value which you want to check in 10,20 format ");
 scanf("%d,%d",&i,&j);
 printf("The value in t[%d][%d] position is %f\n", i,j,t[i*n+j+i]);
}

}

